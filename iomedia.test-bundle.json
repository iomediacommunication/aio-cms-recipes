{
    "manifests": {
        "iomedia/test-bundle": {
            "manifest": {
                "bundles": {
                    "Iomedia\\TestBundle\\TestBundle": [
                        "dev",
                        "test"
                    ]
                },
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%",
                    "tests/": "tests/",
                    ".env.test": ".env.test",
                    ".php-cs-fixer.php": ".php-cs-fixer.php",
                    "phpstan.neon": "phpstan.neon",
                    "phpunit.xml": "phpunit.xml"
                },
                "gitignore": [
                    ".php-cs-fixer.dist.php",
                    "phpunit.xml.dist"
                ],
                "composer-scripts": {
                    "composer-validate": "composer validate --no-check-lock",
                    "composer-security": "vendor/bin/local-php-security-checker-installer && vendor/bin/local-php-security-checker",
                    "php-cs-fixer-check": "vendor/bin/php-cs-fixer list-files --config .php-cs-fixer.php",
                    "php-cs-fixer-fix": "vendor/bin/php-cs-fixer fix --config .php-cs-fixer.php",
                    "phpstan": "vendor/bin/phpstan analyze -c phpstan.neon",
                    "tests-db-create": "bin/console iomedia:database-test:create --env=test --no-interaction",
                    "tests": "vendor/bin/phpunit -v --stop-on-failure",
                    "tests-all": [
                        "Composer\\Config::disableProcessTimeout",
                        "@composer-validate",
                        "@composer-security",
                        "@phpstan",
                        "@php-cs-fixer-check",
                        "@tests-db-create",
                        "@tests"
                    ]
                },
                "post-install-output": [
                    "  * Configurer la constante DATABASE_URL dans le fichier .env.test.",
                    "",
                    "  * Ajouter des fichiers de contenus dans le dossier tests/Resources/data/aio-cms.",
                    "",
                    "  * Nouvelle configuration pour phpstan dans le fichier phpstan.neon.",
                    "",
                    "  * Nouvelle configuration pour php-cs-fixer dans le fichier .php-cs-fixer.php.",
                    ""
                ]
            },
            "files": {
                "config/packages/test/cache.yaml": {
                    "contents": [
                        "parameters:",
                        "    iomedia_cache: '%kernel.cache_dir%/../iomedia/admin-test'",
                        "",
                        "framework:",
                        "    cache:",
                        "        directory: '%kernel.cache_dir%/../iomedia/admin-test'"
                    ],
                    "executable": false
                },
                "config/packpages/test/doctrine.yaml": {
                    "contents": [
                        "doctrine:",
                        "    dbal:",
                        "        url: '%env(resolve:DATABASE_TEST_URL)%'",
                        ""
                    ],
                    "executable": false
                },
                ".env.test": {
                    "contents": [
                        "# define your env variables for the test env here",
                        "###> doctrine/doctrine-bundle ###",
                        "DATABASE_TEST_URL=mysql://root:root@db:3306/test",
                        "###< doctrine/doctrine-bundle ###",
                        ""
                    ],
                    "executable": false
                },
                ".php-cs-fixer.php": {
                    "contents":[
                        "<?php",
                        "",
                        "$finder = PhpCsFixer\\Finder::create()",
                        "    ->in(__DIR__)",
                        "    ->notPath([",
                        "        'config/bootstrap.php',",
                        "        'config/bundles.php',",
                        "        'tests/phpstan/symfony-console-application.php',",
                        "        'tests/phpstan/doctrine-object-manager.php',",
                        "        'tests/bootstrap.php',",
                        "    ])",
                        "    ->exclude([",
                        "        'bin',",
                        "        'node_modules',",
                        "        'public',",
                        "        'var',",
                        "        'vendor',",
                        "    ])",
                        ";",
                        "",
                        "return (new PhpCsFixer\\Config())",
                        "    ->setRiskyAllowed(false)",
                        "    ->setRules([",
                        "        '@Symfony' => true,",
                        "        '@PHP74Migration' => true,",
                        "        'phpdoc_align' => ['align' => 'left',],",
                        "        'phpdoc_separation' => false,",
                        "        'phpdoc_summary' => false,",
                        "        'visibility_required' => ['elements' => ['property', 'method', 'const'],],",
                        "        'yoda_style' => true,",
                        "    ])",
                        "    ->setFinder($finder)",
                        ";",
                        ""
                    ],
                    "executable": false
                },
                "phpstan.neon": {
                    "contents": [
                        "parameters:",
                        "    level: 2",
                        "    paths:",
                        "        - src",
                        "        - tests",
                        "    includes:",
                        "        - vendor/phpstan/phpstan-doctrine/extension.neon",
                        "        - vendor/phpstan/phpstan-doctrine/rules.neon",
                        "        - vendor/phpstan/phpstan-symfony/extension.neon",
                        "        - vendor/phpstan/phpstan-symfony/rules.neon",
                        "    excludePaths:",
                        "        - tests/bootstrap.php",
                        "    tmpDir: var/cache/phpstan",
                        "    symfony:",
                        "        console_application_loader: tests/phpstan/symfony-console-application.php",
                        "        container_xml_path: '%rootDir%/../../../var/cache/dev/srcApp_KernelDevDebugContainer.xml'",
                        "    doctrine:",
                        "        objectManagerLoader: tests/phpstan/doctrine-object-manager.php"
                    ],
                    "executable": false
                },
                "phpunit.xml": {
                    "contents": [
                        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                        "",
                        "<!-- https://phpunit.readthedocs.io/en/latest/configuration.html -->",
                        "<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                        "         xsi:noNamespaceSchemaLocation=\"bin/.phpunit/phpunit.xsd\"",
                        "         backupGlobals=\"false\"",
                        "         colors=\"true\"",
                        "         bootstrap=\"tests/bootstrap.php\"",
                        ">",
                        "    <php>",
                        "        <ini name=\"display_errors\" value=\"1\" />",
                        "        <ini name=\"error_reporting\" value=\"-1\" />",
                        "        <server name=\"APP_ENV\" value=\"test\" force=\"true\" />",
                        "        <server name=\"SHELL_VERBOSITY\" value=\"-1\" />",
                        "    </php>",
                        "",
                        "    <testsuites>",
                        "        <testsuite name=\"Project Test Suite\">",
                        "            <directory>tests</directory>",
                        "        </testsuite>",
                        "    </testsuites>",
                        "",
                        "    <filter>",
                        "        <whitelist processUncoveredFilesFromWhitelist=\"true\">",
                        "            <directory suffix=\".php\">src</directory>",
                        "        </whitelist>",
                        "    </filter>",
                        "",
                        "    <listeners>",
                        "        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\" />",
                        "    </listeners>",
                        "",
                        "    <extensions>",
                        "        <extension class=\"DAMA\\DoctrineTestBundle\\PHPUnit\\PHPUnitExtension\" />",
                        "    </extensions>",
                        "</phpunit>",
                        ""
                    ],
                    "executable": false
                },
                "tests/phpstan/symfony-console-application.php": {
                    "contents": [
                        "<?php",
                        "",
                        "use App\\Kernel;",
                        "use Symfony\\Bundle\\FrameworkBundle\\Console\\Application;",
                        "",
                        "require __DIR__ . '/../../config/bootstrap.php';",
                        "$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);",
                        "",
                        "return new Application($kernel);",
                        ""
                    ],
                    "executable": false
                },
                "tests/phpstan/doctrine-object-manager.php": {
                    "contents": [
                        "<?php",
                        "",
                        "use App\\Kernel;",
                        "",
                        "require __DIR__ . '/../../config/bootstrap.php';",
                        "$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);",
                        "$kernel->boot();",
                        "",
                        "return $kernel->getContainer()->get('doctrine')->getManager();",
                        ""
                    ],
                    "executable": false
                },
                "tests/Resources/data/aio-cms/.gitkeep": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "be1651197495e5bb768b96ead3421d533e23bc64"
        }
    }
}
